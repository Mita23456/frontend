
schema {
	query: Query
	mutation: Mutation
}
scalar Time
type Query {
	viewer: User
  
	# Fetches an object given its ID
	node(
	  # The ID of an object
	  id: ID!
	): Node
}

interface Node {
	id: ID!
}

type PageInfo {
	startCursor: String
	endCursor: String
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
}

type Badge implements Node {
	currentLevel: Int!
	displayName: String!
	id: ID!
	points: Int!
	progressPercentageToNextLevel: Int!
	timeCreated: Time!
	timeUpdated: Time!
} 

type BadgesConnection {
	edges: [BadgeEdge]!
	pageInfo: PageInfo!
} 

type BadgeEdge {
	node: Badge!
	cursor: String!
}

type Issue implements Node {
	body: String!
	commentCount: Int!
	id: ID!
	issueType: String!
	labels: [String]!
	repository: String!
	repositoryAvatar: String!
	repositoryUpdatedAt: Time!
	title: String!
	url: String!
} 

type IssuesConnection {
	edges: [IssueEdge]!
	pageInfo: PageInfo!
} 

type IssueEdge {
	node: Issue!
	cursor: String!
}

type User implements Node {
	badges(first: Int, last: Int, after: String, before: String): BadgesConnection!
	handle: String!
	id: ID!
	issuesFromLastRepo(first: Int, last: Int, after: String, before: String): IssuesConnection!
	issuesFromOtherRecentRepos(first: Int, last: Int, after: String, before: String): IssuesConnection!
	name: String!
	relevantIssues(first: Int, last: Int, after: String, before: String): IssuesConnection!
	timeCreated: Time!
	timeUpdated: Time!
}

input CreateUserInput {
	handle: String!
	name: String!
}

input UpdateUserInput {
	name: String!
}

type Mutation { 
	createUser(user: CreateUserInput!): User!
}
